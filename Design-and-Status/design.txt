Goal: To create a fully functional file browser with the following features:
    - Read in a file
    - Interpret three tags: <a>, <br>, and <p>
    - Display the aforementioned file
    - Display a user interface
    - Provide error messages to the end-user
    - Allows for the use of links created by <a> tag to open other files in the same directory
    - Allows the user to go back to a previously opened file


Decisions:

    - Main (main.cpp):

        - Initalizes an instance of the UI class and calls the UI::run() function

    - UI Class (UI.h and UI.cpp):
        - Display calls the display function from buffer and adds style elements. Also prints UI elements that are needed for the execute and run.
        - Execute excecutes commands and takes in a char that represents users choice and a bool to check if user is done reading file
            - Uses a switch to check if user wants to open,go, back, next Page, previous Page, or quit 
            - Open takes in a file name and uses the buffer function openFile to open the file with that name
            - Go takes in link number from user and then uses the buffer function openLink to open the link
            - Back uses the buffer function openLastFile to open the last file opened
            - Previous uses the buffer function lastPage to go back to the last page of a file
            - Next Page uses the nextPage function to move to the next page of a file
        - 
    - Buffer Class (Buffer.h and Buffer.cpp):

        - Where to convert from words to lines?

            - I had to decide where to convert from the individual words that the Buffer was reading 
              in into the lines that it was going to have to print out. I decided to have it happen as the file was being read in
              to make the display function more efficient and also because it makes the display function easier to understand.

        - Error Handling
        
            - All error printing was done through the buffer to avoid duplicating code and because the buffer already had error reporting created by
              the time that the UI was at the point of needing to print errors

            - It also made formatting easier when re-displaying the UI because there was only one function call rather than a function call and a cout statement
